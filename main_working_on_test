
#![no_std]
#![no_main]
#![feature(abi_avr_interrupt)]

use core::{
    ptr::write_bytes,
    sync::atomic::{AtomicBool, Ordering},
};


use atmega_hal::port::mode::{Floating, Input, Output};
use atmega_hal::port::{self, Pin};
use atmega_hal::usart::{Baudrate, Usart};
use atmega_hal::prelude::_embedded_hal_serial_Read;

use embedded_hal::{delay::DelayNs, digital::InputPin};

use i2c_slave::*;
use panic_halt as _;
use ufmt::{uwrite, uwriteln};

type CoreClock = atmega_hal::clock::MHz16;
type Delay = atmega_hal::delay::Delay<crate::CoreClock>;

mod i2c_slave;

static TWI_INT_FLAG: AtomicBool = AtomicBool::new(false);

fn delay_ms(ms: u16) {
    Delay::new().delay_ms(u32::from(ms))
}

#[allow(dead_code)]
fn delay_us(us: u32) {
    Delay::new().delay_us(us)
}

// I2C interrupt handler
#[avr_device::interrupt(atmega2560)]
fn TWI() {
    avr_device::interrupt::free(|_| {
        TWI_INT_FLAG.store(true, Ordering::SeqCst);
    });
}


#[avr_device::entry]
fn main() -> ! {
    let dp = atmega_hal::Peripherals::take().unwrap();
    let pins = atmega_hal::pins!(dp);

    let mut serial = Usart::new(
        dp.USART0,
        pins.pe0,
        pins.pe1.into_output(),
        Baudrate::<crate::CoreClock>::new(57600),
    );
    //let mut serial = atmega_hal::default_serial!(dp, pins, 9600);

    let mut led = pins.pb7.into_output();

    // Using external pullup resistors, so pins configured as floating inputs
    let sda = pins.pd1.into_floating_input();//.into_floating_input();
    let scl = pins.pd0.into_floating_input();//into_floating_input();

    //-----------------------Test 1--------------------------------- 
    // loop {
    //     if sda.is_low() {
    //         uwrite!(&mut serial, "sda Low\n ").unwrap();
    //     }
    //     if sda.is_high() {
    //         uwrite!(&mut serial, "sda High\n ").unwrap();
    //     }
    //     if scl.is_low() {
    //         uwrite!(&mut serial, "scl Low\n ").unwrap();
    //     }
    //     if scl.is_high() {
    //         uwrite!(&mut serial, "scl High\n ").unwrap();
    //     }
    //     uwrite!(&mut serial, "-----------------------------\n ").unwrap();
    //     delay_ms(1000);
    // }
    //-----------------------Test 1--------------------------------- 

    
    let slave_address: u8 = 0x26;

    let mut i2c_slave: I2cSlave = I2cSlave::new(dp.TWI, slave_address, sda, scl, &TWI_INT_FLAG);

    // Enable global interrupt
    unsafe { avr_device::interrupt::enable() };

    // Disabling power reduction for TWI
    //dp.CPU.prr.write(|w| w.prtwi().clear_bit());

    // Value recieved from I2C Master
    let mut buf: [u8; 4];

    ufmt::uwriteln!(&mut serial, "Initialized with addr: 0x{:X}", slave_address).unwrap();

    led.set_low();

    loop {
        buf = [0; 4];
        i2c_slave.init(false);

        // RECEIVE
        match i2c_slave.receive(&mut buf) {
            Ok(_) => {
                uwrite!(&mut serial, "Received: ").unwrap();

                buf.iter().for_each(|b| {
                    uwrite!(&mut serial, "{} ", *b).unwrap();
                });
                uwrite!(&mut serial, "\n").unwrap();
            }
            Err(err) => {
                uwriteln!(&mut serial, "Error: {:?}", err).unwrap();
            }
        };



        // RESPOND

        // Multiply each u8 by 10 just to see difference in master's output clearly
        /* */
        // for b in buf.iter_mut() {
        //     *b *= 10;
        // }

        // match i2c_slave.respond(&mut buf) {
        //     Ok(count) => uwriteln!(&mut serial, "{} bytes has been sent back", count).unwrap(),
        //     Err(err) => uwriteln!(&mut serial, "{:?}", err).unwrap(),
        // };

        // uwrite!(&mut serial, "\n").unwrap();
    }
}
